// Detailed video explanation: https://youtu.be/0DNDvuHZDiQ

#include <iostream>
#include <vector>
#include <list>

using namespace std;

int main() {
    vector<int> v = { 1,2,3 };
    cout << "size = " << v.size() << ", capacity = " << v.capacity() << endl;
    cout << v.max_size() << endl;
    v.push_back(5);
    cout << "size = " << v.size() << ", capacity = " << v.capacity() << endl;
    int cap = v.capacity();

    for (int n : v)    //  iterating through vector array
    {
        cout << n << " ";
    }
    cout << endl;

    // checking how the capacity grows if we insert more elements
    /*for (int i = 0; i < 100; ++i) {
        v.push_back(i);
        if (cap != v.capacity()) {
            cap = v.capacity();
            cout << "capacity = " << cap << endl;
        }
    }*/

    //cout << v[104] << endl;               // do not cause index out of bound error 
    //cout << v.at(104) << endl;            // cause index out of bound error ( preferred to use this)

    cout << "front = " << v.front() << ", back = " << v.back() << endl;

    // insert -100 at index=2
    v.insert(v.begin() + 2, -100);          
    cout << v[2] << endl;
    cout << "size = " << v.size() << endl; 

    //  pop last element
    v.pop_back();
    cout << "size = " << v.size() << endl;
   
    // insert another container to vector
    list<int> ll = { -100,-200,-300 };          
    v.insert(v.begin(), ll.begin(), ll.end());
    cout << v[0] << ", " << v[1] << ", " << v[2] << endl;


    v.pop_back();
    //v.erase(v.begin()+1);                       // erase value at index=1
    v.erase(v.begin() + 1, v.begin() + 3);        //  erase values from index 1 to 2     ( 3 is exclusive)
    cout << v[0] << ", " << v[1] << ", " << v[2] << endl;

    for (int n : v)    //  iterating through vector array
    {
        cout << n << " ";
    }
    cout << endl;

    return 0;
}

/*
size()                           total size of vector
capacity()                       total capacity of vector
max_size()     
=, [], at()
front()                  give value of first index
back()                   give value of last index
shrink_to_fit()          shrink vactor to the total size
empty()                  check vector is empty or not

begin(), end(), 
rbegin(), rend()

insert()                  insert element at specific index
erase()                   erase element at specific index or erase range of elements
push_back()              insert element at last 
pop_back()               pop last element


*/
